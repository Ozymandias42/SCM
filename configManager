#!/bin/bash

###LIBRARIES TO LOAD
source ../Functional-Bash/functional.sh
CONFIGFILE="$HOME/.scm"
[ -e $CONFIGFILE ] && source $CONFIGFILE

flags=(
#possible flags to supply to the scriipt
#format fullversion;s[hort]
       "--help;-h"
       "add;a"
       "justadd;ja"
       "link;l"
       "unlink;ul"
       "update;up"
       "modify;mod"
       "remove;rm"
       "initialise;init"
       "report;rp"
       "--tag;-t"
       "--secure;-s"
       "--carefully")

descriptions=("$(basename $0) command --flag --tag tag1,tag2,tagN file\nPrints this help"
              "Adds file to the config-store and replaces original with symlink"
              "Adds file to the config-store without replacing the original"
              "Creates symlink to specified file[s in [-t]ag-group]"
              "Removes symlink for specified file[s in [-t]ag-group]"
              "Checks existing symlinks. Updates them if necessary"
              "Allows the user to modify a files's config"
              "Removes from storage"
              "Initialises config-storage with supplied git-repo"
              "Print report about configs in effect"
              "Lets the user specify one or more tags. [tag1,tag2,..,tagN]"
              "Lets the user specify the mode of operation. Secure or insecure"
              "Asks the user whenever an operation requires a decision")

help(){
#Creates --help output
    #Formatting of --help output
    buildHelp() { printf "%${3}s\t %s" "${1}" "$2" ; printf "\n" ; }
    
    ###reformats list of flags by substituting ';' with ', ' use with ((p)ref)map
    flag4help(){ echo "${1/;/', '}" ; }
    
    #howto call: returnlongest [0-9]+ ".*" ###returns length of longest string in list
    ###use with ((p)ref)foldr
    returnlongest(){ [[ ${1} -ge ${#2} ]] && echo ${1} || echo ${#2} ; }
    
    helpflags=()
    prefmap flag4help flags[@] helpflags
    leftpadding=0
    preffoldr returnlongest helpflags[@] leftpadding
    res=()
    prefzipWith buildHelp helpflags[@] descriptions[@] res leftpadding[@]
    forEach echo res[@] 
 }

parseArguments(){
#NOTE 1: using BASH_ARGV to access arguments passed to the script reverses their order.
#      This is due to arguments being saved in a LIFO stack as opposed to an array.
#See:  https://lists.gnu.org/archive/html/bug-bash/2014-11/msg00158.html
#For this reason the next line checks the last element of the array to access the first passed to the script.
    case ${BASH_ARGV[-1]} in
        "help"|"-h"|"--help"    ) parameters["CMD"]=help ;;
        "add"|"a"               ) parameters["CMD"]=add  ;;
        "justadd"|"ja"          ) parameters["CMD"]=justadd ;;
        "link"|"l"              ) parameters["CMD"]=link ;;
        "unlink"|"ul"           ) parameters["CMD"]=unlink ;;
        "update"|"up"           ) parameters["CMD"]=update ;;
        "modify"|"mod"          ) parameters["CMD"]=modify ;;
        "init"                  ) parameters["CMD"]=init ;;
        "report"|"rp"           ) parameters["CMD"]=report ;;
                               *) echo "ERROR: First parameter has to be command. See --help"; exit ;;
    esac

#SEE NOTE 1
    for (( i=$((${#BASH_ARGV[@]}-2)); i>=0; i-- )); do
        case ${BASH_ARGV[$i]} in
        "--tag"|"-t")
            parameters["TAGS"]="${parameters["TAGS"]} $(echo ${BASH_ARGV[$(($i-1))]}|sed 's/,/\ /g') "
            i=$(($i-1))
            ;;
        "-s"|"--secure") 
            parameters["SECURE"]=1
            ;;
        "--carefully") 
            parameters["CAREFUL"]=1
            ;;
        *)
            parameters["PATHS"]="${parameters["PATHS"]}${BASH_ARGV[$i]} "
            ;;
        esac
    done
}

##createMETA returns the new value of SECURE 
##since it sets that value depending on the files location
createMETA(){
#Signature $1=file 2=tags $3=secure $4=interactive
    FILENAME=$(basename ${1})
    FILEPATH=$(dirname $(readlink -f ${1}))
    TAGS=(${2:-"default"})
    SECURE=${3:-0} #Sets secure to 0 if not set.
    INTERACTIVE=${4:-0} #Sets interactive to 0 if not set

    #if $HOME in FILEPATH || substitutes /home/<user>/ with HOME in METAFILE
    #This allows for anonymisation of usernames in file-paths
    if [[ $(grep $HOME <<< $FILEPATH) ]]; then 
        DIRNAME="HOME"$(cut -d '/' -f4- <<< $FILEPATH)
    else
        DIRNAME=$FILEPATH
        #Checks if in non-user-owned dir. Sets secure.
        [ ! -O $DIRNAME ] && SECURE=1 || SECURE=0
    fi

    #Create __META-File
    METAFILE="__META-$(basename $1)"
    [[ $SECURE -eq 1 ]] && METAFILE="$SMETA/${METAFILE}" || METAFILE="$META/${METAFILE}"
    touch ${METAFILE}
    ##NOTE: while >> is standard output-redirection <<- is here-docs
    ##SEE: http://tldp.org/LDP/abs/html/here-docs.html
    [[ $SECURE -eq 1 ]] && CMD="sudo tee" || CMD="cat"

    eval $CMD >> ${METAFILE} <<- EOF
	FILENAME=$FILENAME 
	DIRNAME=$DIRNAME
	TAGS=${TAGS[@]}
	SECURE=$SECURE
	EOF

echo $SECURE
}

isNotInStore(){
    #Checks if file is already in store by looking for corresponding META-file
    [ -e "$META/__META-$(basename ${1})" ] || [ -e "$SMETA/__META-$(basename ${1})" ] \
    && echo 0 || echo 1
}

#Adds files to the storage
add(){ 
    parameters["PATHS"]=$(filter isNotInStore ${parameters["PATHS"]})

    [ "${parameters["PATHS"]}" == "" ] && { echo "Nothing to add. Everything is already in store"; exit ; }
    parameters["SECURE"]=$(refmap createMETA parameters["PATHS"] ${parameters["TAGS"]})

    #Array-izing possible multiple values inside of parameters' fields. (using default IFS=" ") 
    #Because Bash has no concept of multidimensional arrays but requires one to loop over things.
    local -a SECURE=(${parameters["SECURE"]})
    local -a PATHS=(${parameters["PATHS"]})

    #Importing File and creating symlink in place
    for (( i=0; i<=${#PATHS[@]}; i++ )); do
        FILE=$(basename ${PATHS[$i]})
        case ${SECURE[$i]} in 
            1) sudo mv ${PATHS[$i]} $SSTORE/
               link $FILE
               ;;
            0) mv ${PATHS[$i]} $STORE/
               link $FILE
               ;;
        esac
    done

}

getFiles4Tag(){ 
    local -a TAG=$1
    local -a FILENAMES
    FILENAMES=($(grep -RE "TAGS=.*${TAG}.*" {${META},${SMETA}} | cut -d':' -f 1 | cut -d'-' -f 2))
    echo ${FILENAMES[@]}
}

getFileTargetDir(){
    local FILE=$1
    TARGETDIR=$(grep -RE "DIRNAME" {${META},${SMETA}}/__META-$FILE | cut -d'=' -f2 )
    echo $TARGETDIR
}

linkFile(){
    local FILE=$1
    local TARGETDIR=$2
    [ "$(echo $TARGETDIR|grep -Eo '^HOME')" == "HOME" ] && TARGETDIR=$(echo $TARGETDIR|sed "s|^HOME|$HOME|")

    if [ ! -O $TARGETDIR ]; then 
        echo "Linking file to non-user directory. Require superuser privileges" 
        sudo ln -s $SECURE/$FILE $TARGETDIR/$FILE
        sudo echo $FILE >> $SLINKS
    else 
        ln -s $STORE/$FILE $TARGETDIR/$FILE
        echo $FILE >> $LINKS 
    fi
}

unlinkFiles(){
    local FILE=$1
    local TARGETDIR=$2
    [ $(echo $TARGETDIR|grep -Eo '^HOME') ] && TARGETDIR=$(echo $TARGETDIR|sed "s|^HOME|$HOME|")

    if [ -O $TARGETDIR ]; then
        rm $TARGETDIR/$FILE ; sed -i "/^$FILE/d" $LINKS ; 
    else 
        echo "Deleting "$FILE" from root-owned "$TARGETDIR" requires sudo."
        sudo rm $TARGETDIR/$FILE ; sudo sed -i "|^$FILE|d" $SLINKS ; 
    fi
}

isNotLinked(){
    grep -x $1 {${LINKS},${SLINKS}} &>/dev/null
    [ $? -eq 1  ] && echo 1 || echo 0
}

link(){ 
    #Variants: 
        #1. nothing supplied => link all tagged 'default'
        #2. tag supplied     => link all with supplied tags
        #3. file supplied    => link only the supplied file
    #Passable variable for calling of link() from within other functions (with $1 supplied)
    local -a FILES2LINK=(${1:-""})
    local -a TARGETDIRS=()
    local -a TAGS=()
    
    #determine if called directly. if so $1 is NOT set, meaning FILES2LINK contains only ""
    [ "${FILES2LINK[@]}" == "" ] && {
        [ "${parameters["TAGS"]}" == "" ] && [ "${parameters["PATHS"]}" == "" ] \
        && TAGS=("default") || TAGS=(${parameters["TAGS"]})
        
        [ "${parameters["PATHS"]}" == "" ]   && FILES2LINK=()    || FILES2LINK=(${parameters["PATHS"]})
        FILES2LINK=(${FILES2LINK[@]} $(map getFiles4Tag ${TAGS[@]}))
        }    

    #filter for files that have not been linked already
    local -a UNLINKEDFILES=($(reffilter isNotLinked FILES2LINK[@]))
    [ ${#UNLINKEDFILES[@]} -eq 0 ] && { echo "Nothing to link. Everything already set. exiting.." ; exit ; }
    
    #Compute target-directories.
    TARGETDIRS=$(refmap getFileTargetDir UNLINKEDFILES[@])

    #Avoid running actually linking with invalid tags or w/o files or targets.
    [ "${#TARGETDIRS[@]}" != "" ] \
        && zipWith linkFile FILES2LINK[@] TARGETDIRS[@] \
        || echo "No such file: ${parameters["PATHS"]}"
}

unlink(){
    #Variants:
        #1. nothing supplied => unlink all tagged 'default'
        #2. tag supplied => unlink all with supplied tags
        #3. file supplied unlink file if it exists and is linked.
    local -a FILES2UNLINK=()
    local -a TAGS=()

    #compute list of files for supplied tags, set (provisional) files to unlink, set tags to default if none specified.
    [ "${parameters["TAGS"]}" == "" ]    && TAGS=("default") || TAGS=(${parameters["TAGS"]})
    [ "${parameters["PATHS"]}" == "" ]   && FILES2UNLINK=()    || FILES2UNLINK=(${parameters["PATHS"]})
    FILES2UNLINK=(${FILES2LINK[@]} $(map getFiles4Tag ${TAGS[@]}))

    #filter for files that exist in store by checking if corresponding __META-files exist.
    hasMETA(){ [ -e $META/__META-$1 ] || [ -e $SMETA/__META-$1 ] && echo 1 || echo 0 ; }
    tmp=($(reffilter hasMETA FILES2UNLINK[@]))

    #filter for files that are linked
    isLinked(){ grep -x $1 {${LINKS},${SLINKS}} &>/dev/null ;  [ $? -eq 0  ] && echo 1 || echo 0 ; }
    FILES2UNLINK=($(reffilter isLinked tmp[@]))

    #Compute target-directories.
    TARGETDIRS=$(map getFileTargetDir ${FILES2UNLINK[@]})

    #actually unlink files by removing the symbolik link and the entry in the linked files list.
    [ ${#FILES2UNLINK[@]} -ge 1 ] && [ ${#TARGETDIRS[@]} -ge 1 ] \
    && zipWith unlinkFiles FILES2UNLINK[@] TARGETDIRS[@] \
    || echo "Nothing to unlink"
}

#update(){ 
#    SUPPOSED_PATH=$(
#}

modify(){ 
    [[ -e $META/__META-${parameters["PATHS"]} ]] \
    && $EDITOR $META/__META-${parameters["PATHS"]} \
    || echo "__META-${parameters["PATHS"]} does not exist"
}
#
#remove(){ ; }
#
init(){ 
    if [ -e $CONFIGFILE ]; then 
        echo "$CONFIGFILE exists. recreating config-store accordingly" 
    else
        echo "No configfile under $CONFIGFILE. Creating new one.." ; touch $CONFIGFILE ;
        MAINDIR="$HOME/.configStore"
        cat >> $CONFIGFILE <<- EOF
		MAINDIR="$MAINDIR"
		STORE="$MAINDIR/STORE"
		META="$MAINDIR/META"
		LINKS="$MAINDIR/LINKS"
		SECURE="$MAINDIR/SECURE"
		SMETA="$MAINDIR/SECURE/META"
		SLINKS="$MAINDIR/SECURE/SLINKS"
		EOF
    fi
    
    echo "Creating folders..."
    source $CONFIGFILE
    [ ! -e $MAINDIR ]   && { mkdir $MAINDIR ; echo "Creating $MAINDIR" ; }   || echo "$MAINDIR exists. ...skipping"
    [ ! -e $STORE ]     && { mkdir $STORE ; echo "Creating $STORE" ; }     || echo "$STORE exists. ...skipping"
    [ ! -e $META ]      && { mkdir $META ; echo "Creating $META" ; }      || echo "$META exists. ...skipping"
    [ ! -e $LINKS ]     && { touch $LINKS ; echo "Creating $LINKS" ; }     || echo "$LINKS exists. ...skipping"
    [ ! -e $SECURE ]    && { sudo mkdir $SECURE ; echo "Creating $SECURE" ; }    || echo "$SECURE exists. ...skipping"
    [ ! -e $SMETA ]     && { sudo mkdir $SMETA ; echo "Creating $SMETA" ; }     || echo "$SMETA exists. ...skipping"
    [ ! -e $SLINKS ]    && { sudo touch $SLINKS ; echo "Creating $SLINKS" ; }    || echo "$SLINKS exists. ...skipping"

    echo "The next action requires sudo. Please enter password."
    sudo chown -R root $SECURE
}

report(){
    echo "This files are currently linked:"
    while read p; do
        printf "%s ---> %s \n" $p $(grep -RE DIRNAME $META/__META-$p|cut -d'=' -f2)
    done < $LINKS
}


declare -A parameters # -A SUPER IMPORTANT. WON'T WORK OTHERWISE: -A == associative array
main(){ #Entrypoint to the script
    parseArguments #parameters 
    ${parameters["CMD"]}
}
main
